package com.assignmentmanagement.controller;

import com.assignmentmanagement.dto.GoogleCallbackRequest;
import com.assignmentmanagement.dto.GoogleLoginRequest;
import com.assignmentmanagement.dto.JwtResponse;
import com.assignmentmanage        }
    }

    @PutMapping("/update-role")
    public ResponseEntity<?> updateUserRole(@Valid @RequestBody UpdateRoleRequest updateRoleRequest,
                                          HttpServletRequest request) {
        try {
            String token = tokenProvider.getJwtFromRequest(request);
            if (token == null) {
                return ResponseEntity.badRequest().body(new MessageResponse("No token provided"));
            }

            String email = tokenProvider.getUsernameFromToken(token);
            User user = userService.findByEmail(email).orElse(null);
            
            if (user == null) {
                return ResponseEntity.badRequest().body(new MessageResponse("User not found"));
            }

            // Only allow role updates for Google OAuth users who don't have a role set yet
            if (user.getAuthProvider() != AuthProvider.GOOGLE) {
                return ResponseEntity.badRequest().body(new MessageResponse("Role update only allowed for Google OAuth users"));
            }

            // Update the user's role
            try {
                UserRole newRole = UserRole.valueOf(updateRoleRequest.getRole().toUpperCase());
                user.setRole(newRole);
                user = userService.updateUser(user);

                // Generate a new token with the updated role
                String newToken = tokenProvider.generateTokenFromUsername(user.getEmail());

                return ResponseEntity.ok(new JwtResponse(newToken, user.getId(), user.getEmail(),
                        user.getFirstName(), user.getLastName(), user.getRole()));
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest().body(new MessageResponse("Invalid role: " + updateRoleRequest.getRole()));
            }
        } catch (Exception e) {
            System.out.println("=== UPDATE ROLE ERROR ===");
            System.out.println("Exception: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body(new MessageResponse("Error updating user role"));
        }
    }

    // Inner class for response message
    static class MessageResponse {dto.LoginRequest;
import com.assignmentmanagement.dto.RegisterRequest;
import com.assignmentmanagement.dto.UpdateRoleRequest;
import com.assignmentmanagement.model.AuthProvider;
import com.assignmentmanagement.model.User;
import com.assignmentmanagement.model.UserRole;
import com.assignmentmanagement.security.JwtTokenProvider;
import com.assignmentmanagement.service.GoogleAuthService;
import com.assignmentmanagement.service.UserService;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = {"http://localhost:5173", "http://localhost:5174"})
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private UserService userService;

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private GoogleAuthService googleAuthService;

    @PostMapping("/login")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest, 
                                            HttpServletRequest request) {
        try {
            System.out.println("=== LOGIN REQUEST DEBUG ===");
            System.out.println("Content-Type: " + request.getContentType());
            System.out.println("Method: " + request.getMethod());
            System.out.println("Request URI: " + request.getRequestURI());
            System.out.println("Email: " + loginRequest.getEmail());
            System.out.println("Password length: " + (loginRequest.getPassword() != null ? loginRequest.getPassword().length() : "null"));
            System.out.println("LoginRequest object: " + loginRequest);
            
            Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                    loginRequest.getEmail(),
                    loginRequest.getPassword()
                )
            );

            SecurityContextHolder.getContext().setAuthentication(authentication);
            String jwt = tokenProvider.generateToken(authentication);

            User user = (User) authentication.getPrincipal();
            
            return ResponseEntity.ok(new JwtResponse(jwt, user.getId(), user.getEmail(), 
                                                   user.getFirstName(), user.getLastName(), user.getRole()));
        } catch (Exception e) {
            System.out.println("=== LOGIN ERROR DEBUG ===");
            System.out.println("Exception type: " + e.getClass().getSimpleName());
            System.out.println("Exception message: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest()
                .body(new MessageResponse("Error: Invalid email or password!"));
        }
    }

    @PostMapping("/debug-login")  
    public ResponseEntity<?> debugLogin(@RequestBody String rawBody, HttpServletRequest request) {
        System.out.println("=== RAW LOGIN DEBUG ===");
        System.out.println("Content-Type: " + request.getContentType());
        System.out.println("Raw body: " + rawBody);
        
        try {
            com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();
            LoginRequest loginRequest = mapper.readValue(rawBody, LoginRequest.class);
            return ResponseEntity.ok(new MessageResponse("Debug successful: " + loginRequest.toString()));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(new MessageResponse("Debug parse error: " + e.getMessage()));
        }
    }

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@Valid @RequestBody RegisterRequest signUpRequest) {
        try {
            if (userService.existsByEmail(signUpRequest.getEmail())) {
                return ResponseEntity.badRequest()
                    .body(new MessageResponse("Error: Email is already in use!"));
            }

            User user = userService.createUser(
                signUpRequest.getEmail(),
                signUpRequest.getPassword(),
                signUpRequest.getFirstName(),
                signUpRequest.getLastName(),
                signUpRequest.getRole()
            );

            return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(new MessageResponse("Error: Failed to register user!"));
        }
    }

    @PostMapping("/refresh")
    public ResponseEntity<?> refreshToken(@RequestHeader("Authorization") String authHeader) {
        try {
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                
                if (tokenProvider.validateToken(token)) {
                    String username = tokenProvider.getUsernameFromToken(token);
                    String newToken = tokenProvider.generateTokenFromUsername(username);
                    
                    User user = userService.findByEmail(username).orElseThrow();
                    
                    return ResponseEntity.ok(new JwtResponse(newToken, user.getId(), user.getEmail(),
                                                           user.getFirstName(), user.getLastName(), user.getRole()));
                }
            }
            return ResponseEntity.badRequest().body(new MessageResponse("Invalid token"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(new MessageResponse("Error refreshing token"));
        }
    }

    @PostMapping("/google")
    public ResponseEntity<?> googleLogin(@Valid @RequestBody GoogleLoginRequest googleLoginRequest) {
        try {
            // Verify the Google ID token
            GoogleIdToken.Payload payload = googleAuthService.verifyGoogleToken(googleLoginRequest.getIdToken());
            
            String email = payload.getEmail();
            String firstName = (String) payload.get("given_name");
            String lastName = (String) payload.get("family_name");
            String googleId = payload.getSubject();
            String profilePictureUrl = (String) payload.get("picture");

            // Check if user already exists
            User user = userService.findByEmail(email).orElse(null);
            
            if (user == null) {
                // Create new user with Google OAuth
                UserRole role = UserRole.STUDENT; // Default role
                if (googleLoginRequest.getRole() != null) {
                    try {
                        role = UserRole.valueOf(googleLoginRequest.getRole().toUpperCase());
                    } catch (IllegalArgumentException e) {
                        role = UserRole.STUDENT;
                    }
                }
                
                user = new User(email, firstName, lastName, role, AuthProvider.GOOGLE, googleId, profilePictureUrl);
                user = userService.createOAuthUser(user);
            } else if (user.getAuthProvider() != AuthProvider.GOOGLE) {
                // Update existing local user to support Google OAuth
                user.setAuthProvider(AuthProvider.GOOGLE);
                user.setGoogleId(googleId);
                user.setProfilePictureUrl(profilePictureUrl);
                user = userService.updateUser(user);
            }

            // Generate JWT token
            String jwt = tokenProvider.generateTokenFromUsername(user.getEmail());
            
            return ResponseEntity.ok(new JwtResponse(jwt, user.getId(), user.getEmail(), 
                                                   user.getFirstName(), user.getLastName(), user.getRole()));
        } catch (Exception e) {
            System.out.println("=== GOOGLE LOGIN ERROR ===");
            System.out.println("Exception: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest()
                .body(new MessageResponse("Error: Invalid Google token or authentication failed!"));
        }
    }

    @PostMapping("/google/callback")
    public ResponseEntity<?> googleCallback(@Valid @RequestBody GoogleCallbackRequest callbackRequest) {
        try {
            // Exchange authorization code for access token
            String accessToken = googleAuthService.exchangeCodeForToken(
                callbackRequest.getCode(), 
                callbackRequest.getRedirectUri()
            );
            
            // Get user info from Google using access token
            GoogleIdToken.Payload payload = googleAuthService.getUserInfoFromToken(accessToken);
            
            String email = payload.getEmail();
            String firstName = (String) payload.get("given_name");
            String lastName = (String) payload.get("family_name");
            String googleId = payload.getSubject();
            String profilePictureUrl = (String) payload.get("picture");

            // Check if user already exists
            User user = userService.findByEmail(email).orElse(null);
            
            if (user == null) {
                // Create new user with Google OAuth
                UserRole role = UserRole.STUDENT; // Default role
                if (callbackRequest.getRole() != null) {
                    try {
                        role = UserRole.valueOf(callbackRequest.getRole().toUpperCase());
                    } catch (IllegalArgumentException e) {
                        role = UserRole.STUDENT;
                    }
                }
                
                user = new User(email, firstName, lastName, role, AuthProvider.GOOGLE, googleId, profilePictureUrl);
                user = userService.createOAuthUser(user);
            } else if (user.getAuthProvider() != AuthProvider.GOOGLE) {
                // Update existing local user to support Google OAuth
                user.setAuthProvider(AuthProvider.GOOGLE);
                user.setGoogleId(googleId);
                user.setProfilePictureUrl(profilePictureUrl);
                user = userService.updateUser(user);
            }

            // Generate JWT token
            String jwt = tokenProvider.generateTokenFromUsername(user.getEmail());
            
            return ResponseEntity.ok(new JwtResponse(jwt, user.getId(), user.getEmail(), 
                                                   user.getFirstName(), user.getLastName(), user.getRole()));
        } catch (Exception e) {
            System.out.println("=== GOOGLE CALLBACK ERROR ===");
            System.out.println("Exception: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest()
                .body(new MessageResponse("Error: Google OAuth callback failed!"));
        }
    }

    // Inner class for response messages
    public static class MessageResponse {
        private String message;

        public MessageResponse(String message) {
            this.message = message;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }
}